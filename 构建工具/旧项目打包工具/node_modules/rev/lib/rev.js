if (global.GENTLY) require = GENTLY.hijack(require)

// ====

var EventEmitter = require('events').EventEmitter
var mredis       = require('node-redis')
var async        = require('async-array')

// ====

/**
 * Emitter
 *
 * @constructor
 * @param Object options
 */
function Emitter (options) {
  var emitter = this

  options || (options = {})

  this.redisPub = mredis.createClient(
    options.port
  , options.host
  , options.auth
  )
  this.redisSub = mredis.createClient(
    options.port
  , options.host
  , options.auth
  )

  this.prefix   = options.prefix || 'rev:'
  this.encoding = options.encoding || 'utf8'

  this._counts  = { pmsg : {}, msg : {} }
}

var proto = Emitter.prototype
exports.Emitter = Emitter

/**
 * emit
 *
 * @param String event
 */
proto.emit = function emit () {
  var args  = []
  var event = arguments[0]
  for (var i = 1, il = arguments.length; i < il; i++) {
    args[i - 1] = arguments[i]
  }

  this.redisPub.publish(this.prefix + event, JSON.stringify(args))

  return this
}

/**
 * on
 *
 * @param String event
 * @param Function callback
 * @param @optional Function done When subscribed
 * @return Emitter
 */
proto.on = function on (event, callback, done) {
  var emitter   = this

  if ('error' === event) {
    function onError (err) {
      return callback(err)
    }
    this.redisSub.on('error', onError)
    this.redisPub.on('error', onError)

    return emitter
  }

  var counts    = emitter._counts.msg
  var prevCount = null
  var channel   = emitter.prefix + event

  counts[channel] || (counts[channel] = 0)
  prevCount = counts[channel]
  ;++counts[channel]

  if (!prevCount) {
    emitter.redisSub.subscribe(channel)
    if (done) {
      emitter.redisSub.once('subscribe:' + channel, function () {
        done.call(emitter)
      })
    }
  } else if (done) {
    done.call(emitter)
  }

  function onMessage (data) {
    var args    = JSON.parse(data.toString(emitter.encoding))
    callback.apply(emitter, args)
  }
  callback.fn = onMessage

  emitter.redisSub.on('message:' + channel, onMessage)

  return emitter
}
proto.addListener = proto.on

/**
 * pon - Pattern `on`
 *
 * @param String pattern
 * @param Function callback
 * @param @optional Function done When subscribed
 * @return Emitter
 */
proto.pon = function pon (pattern, callback, done) {
  var emitter   = this
  var counts    = emitter._counts.pmsg
  var prevCount = null
  var channel   = emitter.prefix + pattern

  counts[channel] || (counts[channel] = 0)
  prevCount = counts[channel]
  ;++counts[channel]

  if (!prevCount) {
    emitter.redisSub.psubscribe(channel)
    if (done) {
      emitter.redisSub.once('psubscribe:' + channel, function () {
        done.call(emitter)
      })
    }
  } else if (done) {
    done.call(emitter)
  }

  function onPmessage (channel, data) {
    var args    = JSON.parse(data.toString(emitter.encoding))
    args.unshift(channel.slice(emitter.prefix.length))
    callback.apply(emitter, args)
  }
  callback.fn = onPmessage

  emitter.redisSub.on('pmessage:' + channel, onPmessage)

  return emitter
}
proto.paddListener = proto.pon

/**
 * off
 *
 * @param String event
 * @param Function fn
 * @return Emitter
 */
proto.off = function off (event, fn) {
  var channel = this.prefix + event
  var counts  = this._counts.msg

  if (counts[channel]) {
    ;--counts[channel]
  }

  if (0 === counts[channel]) {
    this.redisSub.unsubscribe(channel)
    counts[channel] = null
  }

  this.redisSub.removeListener('message:' + channel, fn.fn)

  return this
}
proto.removeListener = proto.off

/**
 * poff
 *
 * @param String pattern
 * @param Function fn
 */
proto.poff = function poff (pattern, fn) {
  var channel = this.prefix + pattern
  var counts  = this._counts.pmsg

  if (counts[channel]) {
    ;--counts[channel]
  }

  if (0 === counts[channel]) {
    this.redisSub.punsubscribe(channel)
    counts[channel] = null
  }

  this.redisSub.removeListener('pmessage:' + channel, fn.fn)

  return this
}
proto.premoveListener = proto.poff

/**
 * removeAllListeners
 *
 * @param @optional String event
 * @return Emitter
 */
proto.removeAllListeners = function removeAllListeners (event) {
  if (event) {
    var channel = this.prefix + event

    if (!this._counts.msg[channel]) return this

    this._counts.msg[channel] = null
    this.redisSub.removeAllListeners('message:' + channel)
    this.redisSub.unsubscribe(channel)
  } else {
    var channels = Object.keys(this._counts.msg)
    var channel  = null
    var counts   = this._counts.msg

    for (var i = 0, il = channels.length; i < il; i++) {
      channel = channels[i]

      if (0 < counts[channel]) {
        this.redisSub.removeAllListeners('message:' + channel)
        this.redisSub.unsubscribe(channel)
      }
    }

    channels = channel = counts = null
    this._counts.msg = {}
  }

  return this
}

/**
 * premoveAllListeners
 *
 * @param @optional String pattern
 * @return Emitter
 */
proto.premoveAllListeners = function premoveAllListeners (pattern) {
  if (pattern) {
    var channel = this.prefix + pattern

    if (!this._counts.pmsg[channel]) return this

    this._counts.pmsg[channel] = null
    this.redisSub.removeAllListeners('pmessage:' + channel)
    this.redisSub.punsubscribe(channel)
  } else {
    var channels = Object.keys(this._counts.pmsg)
    var channel  = null
    var counts   = this._counts.pmsg

    for (var i = 0, il = channels.length; i < il; i++) {
      channel = channels[i]
      this.redisSub.removeAllListeners('pmessage:' + channel)
      this.redisSub.punsubscribe(channel)
    }

    channels = channel = counts = null
    this._counts.pmsg = {}
  }

  return this
}
